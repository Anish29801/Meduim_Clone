generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Enum definition for user roles
enum Role {
  USER
  ADMIN
}

model User {
  id       Int       @id @default(autoincrement())
  username String    @unique @db.VarChar(255)
  email    String    @unique @db.VarChar(255)
  password String
  fullName String?   @db.VarChar(255)
  bio      String?   @db.VarChar(200)
  avatar   String?
  gender   String?
  role     Role      @default(USER)
  status   String    @default("ACTIVE") 

  // Relations
  bookmarks Article[] @relation("Bookmarks")  // Many-to-many
  articles  Article[] @relation("UserArticles") // One-to-many authored articles
  comments  Comment[] // One-to-many comments

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Article {
  id         Int       @id @default(autoincrement())
  title      String    @db.VarChar(255)
  content    String    @db.LongText
  coverImageBytes Bytes?  @db.LongBlob
  categoryId Int?
  claps      Int       @default(0)
  views      Int       @default(0)
  status      String    @default("ACTIVE")
  // Relations
  category     Category? @relation(fields: [categoryId], references: [id])
  authorId     Int
  author       User      @relation("UserArticles", fields: [authorId], references: [id])
  comments     Comment[]
  bookmarkedBy User[]    @relation("Bookmarks") // Many-to-many
  tags         Tag[]     @relation("ArticleTags") // Many-to-many with tags

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.LongText
  articleId Int
  userId    Int
  parentId  Int?
  likes     Int      @default(0)
  createdAt DateTime @default(now())

  // Relations
  article Article @relation(fields: [articleId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
  parent  Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies Comment[] @relation("CommentReplies")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique @db.VarChar(255)
  articles Article[]
}

model Tag {
  id       Int       @id @default(autoincrement())
  name     String    @unique @db.VarChar(100)
  articles Article[] @relation("ArticleTags") // Many-to-many with articles
}
